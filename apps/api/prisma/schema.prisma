// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  ANALYST
  SELLER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Currency {
  ARS
  USD
}

enum SaleStatus {
  DRAFT
  PENDING
  CONFIRMED
  CANCELLED
}

enum PurchaseStatus {
  DRAFT
  PENDING
  RECEIVED
  CANCELLED
}

enum PaymentMethod {
  CASH
  TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  CHECK
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
}

enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum TaskStatus {
  PENDING
  COMPLETED
}

enum TenantPlan {
  TRIAL
  BASIC
  PRO
  ENTERPRISE
}

enum TenantStatus {
  TRIAL
  ACTIVE
  SUSPENDED
  CANCELLED
}

model Tenant {
  id          String       @id @default(cuid())
  name        String       // Nombre de la empresa
  slug        String       @unique // Para URLs: gridmanager.com/empresa
  email       String       @unique // Email principal de contacto
  phone       String?
  address     String?
  taxId       String?      // CUIT/RUT/Tax ID

  // Plan y facturación
  plan        TenantPlan   @default(TRIAL)
  status      TenantStatus @default(TRIAL)
  trialEnds   DateTime?    // Fin del período de prueba
  billingCycle String?     // monthly, yearly

  // Configuraciones personalizables
  settings    Json?        // { logo, primaryColor, secondaryColor, favicon }
  limits      Json?        // { maxUsers: 5, maxProducts: 1000, maxSales: 5000 }
  features    Json?        // { analytics: true, multiCurrency: false, api: true }

  // Timestamps
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relaciones - Todas las entidades ahora pertenecen a un tenant
  users       User[]
  branches    Branch[]
  customers   Customer[]
  suppliers   Supplier[]
  products    Product[]
  sales       Sale[]
  purchases   Purchase[]
  accounts    Account[]
  incomes     Income[]
  expenses    Expense[]
  quotes      Quote[]
  priceLists  PriceList[]
  subscriptions Subscription[]
  usageMetrics UsageMetric[]

  @@map("tenants")
}

model Subscription {
  id              String       @id @default(cuid())
  tenantId        String
  plan            TenantPlan
  status          String       // active, cancelled, past_due, etc.
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  amount          Decimal      @db.Decimal(12, 2)
  currency        Currency     @default(ARS)

  // External payment provider data
  stripeCustomerId     String?
  stripeSubscriptionId String?
  mercadoPagoId       String?

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  tenant          Tenant       @relation(fields: [tenantId], references: [id])

  @@map("subscriptions")
}

model UsageMetric {
  id       String   @id @default(cuid())
  tenantId String
  metric   String   // users_count, products_count, sales_count, storage_mb
  value    Int
  date     DateTime @default(now())

  tenant   Tenant   @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, metric, date])
  @@map("usage_metrics")
}

model TenantRegistration {
  id            String   @id @default(cuid())
  companyName   String
  ownerName     String
  email         String   @unique
  phone         String?
  industry      String?
  employeeCount String?
  status        String   @default("PENDING") // PENDING, APPROVED, REJECTED
  token         String?  @unique // Email verification token
  createdAt     DateTime @default(now())

  @@map("tenant_registrations")
}

model User {
  id        String     @id @default(cuid())
  tenantId  String     // NUEVO: vinculación con tenant
  email     String     @unique
  name      String
  password  String?    // Opcional para usuarios de Google OAuth
  role      UserRole   @default(SELLER)
  status    UserStatus @default(ACTIVE)
  branchId  String?

  // Google OAuth fields
  googleId  String?    @unique // Google user ID
  avatar    String?    // Profile picture from Google
  provider  String?    @default("local") // "local" o "google"

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  tenant      Tenant        @relation(fields: [tenantId], references: [id]) // NUEVO
  branch      Branch?       @relation(fields: [branchId], references: [id])
  sales       Sale[]
  quotes      Quote[]
  auditLogs   AuditLog[]
  tasks       Task[]
  collections Collection[]
  payments    Payment[]

  @@map("users")
}

model Branch {
  id      String @id @default(cuid())
  tenantId String // NUEVO
  name    String
  address String
  phone   String?
  email   String?
  active  Boolean @default(true)

  tenant          Tenant        @relation(fields: [tenantId], references: [id]) // NUEVO
  users           User[]
  sales           Sale[]
  purchases       Purchase[]
  stockMovements  StockMovement[]
  cashRegisters   CashRegister[]

  @@map("branches")
}

model Customer {
  id              String    @id @default(cuid())
  tenantId        String    // NUEVO
  name            String
  email           String?
  phone           String?
  address         String?
  taxId           String?   @unique
  birthday        DateTime?
  creditLimit     Decimal?  @db.Decimal(12, 2)
  currentBalance  Decimal   @default(0) @db.Decimal(12, 2)
  active          Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  tenant      Tenant       @relation(fields: [tenantId], references: [id]) // NUEVO
  sales       Sale[]
  quotes      Quote[]
  collections Collection[]

  @@map("customers")
}

model Supplier {
  id               String   @id @default(cuid())
  tenantId         String
  name             String   // Nombre comercial
  businessName     String?  // Razón social
  email            String?
  phone            String?
  address          String?
  taxId            String?  @unique
  contactPerson    String?  // Persona de contacto
  paymentTerms     Int      @default(30) // Días de plazo de pago
  creditLimit      Decimal? @db.Decimal(12, 2) // Límite de crédito
  currentBalance   Decimal  @default(0) @db.Decimal(12, 2)
  totalPurchases   Decimal  @default(0) @db.Decimal(12, 2)
  lastPurchaseDate DateTime?
  active           Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  purchases Purchase[]
  payments  Payment[]

  @@map("suppliers")
}

model Product {
  id          String  @id @default(cuid())
  tenantId    String  // NUEVO
  sku         String  @unique
  name        String
  description String?
  category    String?
  brand       String?
  cost        Decimal @db.Decimal(12, 2)
  basePrice   Decimal @db.Decimal(12, 2)
  taxRate     Decimal @default(0) @db.Decimal(5, 2)
  currentStock Int    @default(0)
  minStock    Int     @default(0)
  unit        String  @default("UNIT")
  active      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime  @updatedAt

  tenant          Tenant        @relation(fields: [tenantId], references: [id]) // NUEVO
  priceListItems  PriceListItem[]
  saleItems       SaleItem[]
  purchaseItems   PurchaseItem[]
  quoteItems      QuoteItem[]
  stockMovements  StockMovement[]

  @@map("products")
}

model PriceList {
  id          String    @id @default(cuid())
  tenantId    String    // NUEVO
  name        String
  description String?
  validFrom   DateTime
  validUntil  DateTime?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  tenant Tenant         @relation(fields: [tenantId], references: [id]) // NUEVO
  items  PriceListItem[]

  @@map("price_lists")
}

model PriceListItem {
  id          String @id @default(cuid())
  priceListId String
  productId   String
  price       Decimal @db.Decimal(12, 2)

  priceList PriceList @relation(fields: [priceListId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([priceListId, productId])
  @@map("price_list_items")
}

model Quote {
  id          String     @id @default(cuid())
  tenantId    String     // NUEVO
  number      String     @unique
  customerId  String
  sellerId    String
  validUntil  DateTime
  subtotal    Decimal    @db.Decimal(12, 2)
  taxes       Decimal    @db.Decimal(12, 2)
  total       Decimal    @db.Decimal(12, 2)
  currency    Currency   @default(ARS)
  notes       String?
  convertedToSale Boolean @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  tenant   Tenant      @relation(fields: [tenantId], references: [id]) // NUEVO
  customer Customer    @relation(fields: [customerId], references: [id])
  seller   User        @relation(fields: [sellerId], references: [id])
  items    QuoteItem[]

  @@map("quotes")
}

model QuoteItem {
  id        String  @id @default(cuid())
  quoteId   String
  productId String
  quantity  Int
  unitPrice Decimal @db.Decimal(12, 2)
  total     Decimal @db.Decimal(12, 2)

  quote   Quote   @relation(fields: [quoteId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("quote_items")
}

model Sale {
  id         String     @id @default(cuid())
  tenantId   String     // NUEVO
  number     String     @unique
  customerId String
  sellerId   String
  branchId   String
  status     SaleStatus @default(DRAFT)
  subtotal   Decimal    @db.Decimal(12, 2)
  taxes      Decimal    @db.Decimal(12, 2)
  total      Decimal    @db.Decimal(12, 2)
  currency   Currency   @default(ARS)
  notes      String?
  quoteId    String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  tenant      Tenant       @relation(fields: [tenantId], references: [id]) // NUEVO
  customer    Customer     @relation(fields: [customerId], references: [id])
  seller      User         @relation(fields: [sellerId], references: [id])
  branch      Branch       @relation(fields: [branchId], references: [id])
  items       SaleItem[]
  collections Collection[]
  shipments   Shipment[]

  @@map("sales")
}

model SaleItem {
  id        String  @id @default(cuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Decimal @db.Decimal(12, 2)
  total     Decimal @db.Decimal(12, 2)

  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("sale_items")
}

model Purchase {
  id         String         @id @default(cuid())
  tenantId   String         // NUEVO
  number     String         @unique
  supplierId String
  branchId   String
  status     PurchaseStatus @default(DRAFT)
  subtotal   Decimal        @db.Decimal(12, 2)
  taxes      Decimal        @db.Decimal(12, 2)
  total      Decimal        @db.Decimal(12, 2)
  currency   Currency       @default(ARS)
  notes      String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  tenant   Tenant         @relation(fields: [tenantId], references: [id]) // NUEVO
  supplier Supplier       @relation(fields: [supplierId], references: [id])
  branch   Branch         @relation(fields: [branchId], references: [id])
  items    PurchaseItem[]
  payments Payment[]

  @@map("purchases")
}

model PurchaseItem {
  id         String  @id @default(cuid())
  purchaseId String
  productId  String
  quantity   Int
  unitPrice  Decimal @db.Decimal(12, 2)
  total      Decimal @db.Decimal(12, 2)

  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@map("purchase_items")
}

model Income {
  id          String   @id @default(cuid())
  tenantId    String   // NUEVO
  description String
  amount      Decimal  @db.Decimal(12, 2)
  currency    Currency @default(ARS)
  category    String?
  accountId   String?
  notes       String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant  Tenant   @relation(fields: [tenantId], references: [id]) // NUEVO
  account Account? @relation(fields: [accountId], references: [id])

  @@map("incomes")
}

model Expense {
  id          String   @id @default(cuid())
  tenantId    String   // NUEVO
  description String
  amount      Decimal  @db.Decimal(12, 2)
  currency    Currency @default(ARS)
  category    String?
  accountId   String?
  notes       String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant  Tenant   @relation(fields: [tenantId], references: [id]) // NUEVO
  account Account? @relation(fields: [accountId], references: [id])

  @@map("expenses")
}

model Account {
  id             String  @id @default(cuid())
  tenantId       String  // NUEVO
  name           String
  type           String // CASH, BANK, CARD
  accountNumber  String?
  currentBalance Decimal @default(0) @db.Decimal(12, 2)
  currency       Currency @default(ARS)
  active         Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  tenant      Tenant          @relation(fields: [tenantId], references: [id]) // NUEVO
  movements   AccountMovement[]
  incomes     Income[]
  expenses    Expense[]
  collections Collection[]
  payments    Payment[]

  @@map("accounts")
}

model AccountMovement {
  id          String  @id @default(cuid())
  accountId   String
  amount      Decimal @db.Decimal(12, 2)
  description String
  reference   String? // Reference to sale, purchase, etc.
  date        DateTime @default(now())
  createdAt   DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id])

  @@map("account_movements")
}

model Collection {
  id            String        @id @default(cuid())
  saleId        String
  customerId    String
  userId        String
  amount        Decimal       @db.Decimal(12, 2)
  currency      Currency      @default(ARS)
  paymentMethod PaymentMethod
  accountId     String?
  notes         String?
  date          DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  sale     Sale     @relation(fields: [saleId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  account  Account? @relation(fields: [accountId], references: [id])

  @@map("collections")
}

model Payment {
  id            String        @id @default(cuid())
  purchaseId    String?
  supplierId    String
  userId        String
  amount        Decimal       @db.Decimal(12, 2)
  currency      Currency      @default(ARS)
  paymentMethod PaymentMethod
  accountId     String?
  notes         String?
  date          DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  purchase Purchase? @relation(fields: [purchaseId], references: [id])
  supplier Supplier  @relation(fields: [supplierId], references: [id])
  user     User      @relation(fields: [userId], references: [id])
  account  Account?  @relation(fields: [accountId], references: [id])

  @@map("payments")
}

model Shipment {
  id          String         @id @default(cuid())
  saleId      String
  destination String
  carrier     String?
  trackingId  String?
  status      ShipmentStatus @default(PENDING)
  shippedAt   DateTime?
  deliveredAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  sale Sale @relation(fields: [saleId], references: [id])

  @@map("shipments")
}

model StockMovement {
  id        String              @id @default(cuid())
  productId String
  branchId  String
  type      StockMovementType
  quantity  Int
  reference String? // Reference to sale, purchase, etc.
  notes     String?
  date      DateTime            @default(now())
  createdAt DateTime            @default(now())

  product Product @relation(fields: [productId], references: [id])
  branch  Branch  @relation(fields: [branchId], references: [id])

  @@map("stock_movements")
}

model CashRegister {
  id           String    @id @default(cuid())
  branchId     String
  openedBy     String
  closedBy     String?
  openAmount   Decimal   @db.Decimal(12, 2)
  closeAmount  Decimal?  @db.Decimal(12, 2)
  expectedAmount Decimal? @db.Decimal(12, 2)
  difference   Decimal?  @db.Decimal(12, 2)
  notes        String?
  openedAt     DateTime  @default(now())
  closedAt     DateTime?

  branch Branch @relation(fields: [branchId], references: [id])

  @@map("cash_registers")
}

model Task {
  id          String     @id @default(cuid())
  userId      String?
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("tasks")
}

model ExchangeRate {
  id           String   @id @default(cuid())
  currency     Currency
  officialRate Decimal  @db.Decimal(10, 4)
  blueRate     Decimal? @db.Decimal(10, 4)
  date         DateTime @default(now())
  createdAt    DateTime @default(now())

  @@unique([currency, date])
  @@map("exchange_rates")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  oldValues Json?
  newValues Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Views for KPIs and reporting
view SalesSummary {
  id           String   @unique
  branchId     String
  sellerId     String
  customerId   String
  total        Decimal  @db.Decimal(12, 2)
  currency     Currency
  date         DateTime
  month        Int
  year         Int
  
  @@map("sales_summary")
}

view ProductRanking {
  id           String  @unique
  productId    String
  productName  String
  category     String?
  totalSold    Int
  totalRevenue Decimal @db.Decimal(12, 2)
  period       String
  
  @@map("product_ranking")
}